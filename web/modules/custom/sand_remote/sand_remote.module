<?php

/**
 * @file
 * Provides a sand_remote entity type.
 */
use Drupal\Core\Render\Element;
use Drupal\user\UserInterface;
use Drupal\sand_remote\RemoteETL;

/**
 * Implements hook_theme().
 */
function sand_remote_theme() {
  return [
    'sand_remote' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for sand_remote templates.
 *
 * Default template: sand_remote.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the sand_remote information and any
 *     fields attached to the entity.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_sand_remote(array &$variables) {
  $variables['view_mode'] = $variables['elements']['#view_mode'];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_user_cancel().
 */
function sand_remote_user_cancel($edit, UserInterface $account, $method) {
  switch ($method) {
    case 'user_cancel_block_unpublish':
      // Unpublish sand_remotes.
      $storage = \Drupal::entityTypeManager()->getStorage('sand_remote');
      $sand_remote_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->condition('status', 1)
        ->execute();
      foreach ($storage->loadMultiple($sand_remote_ids) as $sand_remote) {
        $sand_remote->set('status', FALSE);
        $sand_remote->save();
      }
      break;

    case 'user_cancel_reassign':
      // Anonymize sand_remotes.
      $storage = \Drupal::entityTypeManager()->getStorage('sand_remote');
      $sand_remote_ids = $storage->getQuery()
        ->condition('uid', $account->id())
        ->execute();
      foreach ($storage->loadMultiple($sand_remote_ids) as $sand_remote) {
        $sand_remote->setOwnerId(0);
        $sand_remote->save();
      }
      break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete() for user entities.
 */
function sand_remote_user_predelete(UserInterface $account) {
  // Delete sand_remotes.
  $storage = \Drupal::entityTypeManager()->getStorage('sand_remote');
  $sand_remote_ids = $storage->getQuery()
    ->condition('uid', $account->id())
    ->execute();
  $sand_remotes = $storage->loadMultiple($sand_remote_ids);
  $storage->delete($sand_remotes);
}

/**
 * Implements hook_entity_insert().
 */
function sand_remote_sand_remote_insert(\Drupal\Core\Entity\EntityInterface $entity): void {
  $added_to_queue = \Drupal::service('sand.extract_text')->queueEntityForTextExtract('sand_remote', $entity);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function sand_remote_sand_remote_update(\Drupal\Core\Entity\EntityInterface $entity): void {
  $added_to_queue = \Drupal::service('sand.extract_text')->queueEntityForTextExtract('sand_remote', $entity);
}

/**
 * Implements hook_node_insert().
 */
function sand_remote_node_insert(\Drupal\node\NodeInterface $node): void {
  if ($node->getType() == 'external_data') {
    $added_to_queue = \Drupal::service('sand.extract_text')->queueEntityForTextExtract('node', $node);
  }
}

/**
 * Implements hook_node_update().
 */
function sand_remote_node_update(\Drupal\node\NodeInterface $node): void {
  if ($node->getType() == 'external_data') {
    $added_to_queue = \Drupal::service('sand.extract_text')->queueEntityForTextExtract('node', $node);
  }
}

function sand_remote_entity_presave(\Drupal\Core\Entity\EntityInterface $entity) {
  $is_external_data_node = ($entity->getEntityTypeId() === 'node' && $entity->bundle() === 'external_data'); 
  $is_sand_remote_entity = ($entity->getEntityTypeId() === 'sand_remote');

  if ($is_external_data_node || $is_sand_remote_entity) {
    RemoteETL::setDocType($entity);
    RemoteETL::setCommittee($entity);
    RemoteETL::setDocDateYear($entity);
    RemoteETL::setMuniCodeChapter($entity);
  }
}