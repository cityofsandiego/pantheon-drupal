<?php

/**
 * @file
 */

declare(strict_types=1);


use Drupal\node\NodeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
/**
 * Implements hook_help().
 */
function sand_admin_help($route_name): ?string {
  return sand_help_show_help(__DIR__, $route_name);
}

/**
 * Modify field widgets for which remove button will not be added.
 * 
 * These can be added on the route sand_admin.settings.
 *
 * @param array $skipWidgets
 *   A list with field widgets.
 */
function sand_admin_multiple_field_remove_button_skip_widgets_alter(array &$skipWidgets): void {
  $skip_remove_button_widgets_array = explode("\r\n", \Drupal::config('sand_admin.settings')->get('skip_remove_button'));
  foreach ($skip_remove_button_widgets_array as $widget) {
    $skipWidgets[] = $widget;
  }
}

/**
 * Format code in CKEditor so it's easy to read. JS file is in the same folder as this module.
 */
function sand_admin_editor_js_settings_alter(array &$settings) {
  foreach (array_keys($settings['editor']['formats']) as $text_format_id) {
    if ($settings['editor']['formats'][$text_format_id]['editor'] === 'ckeditor') {
      $module_path = \Drupal::service('extension.list.module')->getPath('sand_admin');
      $settings['editor']['formats'][$text_format_id]['editorSettings']['customConfig'] = base_path() . $module_path . '/js/ckeditor_config.js';
    }
  }        
}

/**
 * Implements hook_page_attachments().
 */
function sand_admin_page_attachments(array &$attachments) {
  // Attach the Google Translate library on every page.
  $attachments['#attached']['library'][] = 'sand_admin/google_translate';
}

/**
 * Implements hook_node_access().
 *
 * This disallows any anonymous user from seeing the webteam nodes. They are
 * for internal documentation only.
 *
 * @param \Drupal\node\NodeInterface $node
 * @param $op
 * @param \Drupal\Core\Session\AccountInterface $account
 *
 * @return \Drupal\Core\Access\AccessResultForbidden|\Drupal\Core\Access\AccessResultNeutral
 */
function sand_admin_node_access(NodeInterface $node, $op, AccountInterface $account) {
  if ($account->isAnonymous() && $node->gettype() == 'webteam') {
    return AccessResult::forbidden()->cachePerPermissions();
  }
  return AccessResult::neutral()->cachePerPermissions();
}

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 */
function sand_admin_preprocess_html(&$variables) {
  // Add a new class to the body on edit and add pages so we
  // can style the ckeditor5 pages properly
  $route = \Drupal::routeMatch()->getRouteName();
  if (in_array($route, ['entity.node.edit_form','node.add'])) {
    $variables['attributes']['class'][] = 'node-form-page';
  }
}

/**
 * Searches and replaces strings in node titles.
 * This function is designed to be standalone and not reusable.
 */
function sand_admin_update_node_titles(): void {
  // Define search and replace pairs directly within the function.
  $search_and_replace = [
    ['&amp;', '&'],
    ['&quot;', '"'],
    ['&#039;', "'"],
  ];

  foreach ($search_and_replace as $pair) {
    [$search, $replace] = $pair;
    $entity_ids = \Drupal::entityQuery('node')
      ->condition('title', '%' . $search . '%', 'LIKE')
      ->execute();

    foreach ($entity_ids as $nid) {
      $node = \Drupal\node\Entity\Node::load($nid);
      if ($node) {
        $title = $node->getTitle();
        $newTitle = str_replace($search, $replace, $title);
        if ($title !== $newTitle) {
          $node->setTitle($newTitle);
          $node->save();
          \Drupal::logger('sand_admin')->notice('Node ID @nid title updated from @oldTitle to @newTitle.', [
            '@nid' => $nid,
            '@oldTitle' => $title,
            '@newTitle' => $newTitle,
          ]);
        }
      }
    }
  }
}
