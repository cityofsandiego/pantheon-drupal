// ==========================================================================
// SAND Mixins
// ==========================================================================


// Box Sizing
@mixin box-sizing( $box-model ) {
  -webkit-box-sizing: $box-model; // Safari <= 5
     -moz-box-sizing: $box-model; // Firefox <= 19
          box-sizing: $box-model;
}

// Baseline, measured in pixels
//
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.
//
// @Bug - 04/08/2015
//
// Version: Libsass 3.1 (grunt-sass 0.18.0 or greater).
// Issue: Can't calculate values with units (e.g. $baseline-px / 1rem * 1;)
// Error: 3.9px/px/rem is not a valid CSS value
// Fix: Libsass 3.2 will resolve issue
// Temporary Fix: https://github.com/rowanmanning/rem

// Baseline
$baseline-px: 16 !default;

// Get the rem equivalent of a value
@function rem-value( $value ) {

  // If value is a number, do some magic rem stuff
  @if type-of( $value ) == "number" and unit( $value ) == "px" {

      // Slightly hacky way of removing unit
      $unitless-value: $value / ( $value * 0 + 1 );

      // Return rem value
      @return #{$unitless-value / $baseline-px}rem;
  }

  // Non-numeric value, just return
  @return $value;
}

// Rem mixin
@mixin rem( $property, $values ) {

  // Loop over pixel values to get rem values
  $rem-values: unquote("");

  @each $value in $values {
      $rem-values: append( $rem-values, rem-value( $value ) );
  }

  // Set the pixel/rem values
  #{$property}: $values;
  #{$property}: $rem-values;
}

/*
 * General Mixins (put specific ones in component files where applicable)
*/

@mixin list-reset {
  list-style: none;
  margin: 0;
  padding: 0;
}